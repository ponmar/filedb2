using System;
using System.Collections.Generic;
using System.Text;
using FileDB2Interface.Model;
using MetadataExtractor;

namespace FileDB2Interface
{
    public interface IFileDB2Handle
    {
        public List<string> ListAllFilesystemFiles();
        public List<string> ListNewFilesystemFiles(List<string> blacklistedFilePathPatterns, List<string> whitelistedFilePathPatterns, bool includeHiddenDirectories);
        public List<string> ListAllFilesystemDirectories();
        public bool ParseFilesystemFileExif(string path, out DateTime? dateTaken, out GeoLocation location);
        public List<FilesModel> GetFilesMissingInFilesystem();
        public List<FilesModel> GetFiles();
        public int GetFileCount();
        public List<FilesModel> SearchFiles(string criteria);
        public List<FilesModel> SearchFilesByPath(string criteria);
        public List<FilesModel> SearchFilesRandom(int numFiles);
        public FilesModel GetFileById(int id);
        public bool HasFileId(int id);
        public FilesModel GetFileByPath(string path);
        public List<FilesModel> GetFilesWithPersons(IEnumerable<int> personIds);
        public List<FilesModel> GetFilesWithLocations(IEnumerable<int> locationIds);
        public List<FilesModel> GetFilesWithTags(IEnumerable<int> tagIds);
        public List<FilesModel> GetFilesWithMissingData();
        public bool HasFilePath(string path);
        public void InsertFile(string internalPath, string description = null);
        public void UpdateFileDescription(int id, string description);
        public void DeleteFile(int id);
        public void InsertFilePerson(int fileId, int personId);
        public void DeleteFilePerson(int fileId, int personId);
        public void InsertFileLocation(int fileId, int locationId);
        public void DeleteFileLocation(int fileId, int locationId);
        public void InsertFileTag(int fileId, int tagId);
        public void DeleteFileTag(int fileId, int tagId);
        public List<PersonModel> GetPersons();
        public List<PersonModel> GetPersonsFromFile(int fileId);
        public int GetPersonCount();
        public List<PersonModel> SearchPersons(string criteria);
        public PersonModel GetPersonById(int id);
        public bool HasPersonId(int id);
        public void InsertPerson(string firstname, string lastname, string description = null, string dateOfBirth = null, int? profileFileId = null, Sex sex = Sex.NotApplicable);
        public void UpdatePerson(int id, string firstname, string lastname, string description = null, string dateOfBirth = null, int? profileFileId = null, Sex sex = Sex.NotApplicable);
        public void UpdatePersonFirstname(int id, string firstname);
        public void UpdatePersonLastname(int id, string lastname);
        public void UpdatePersonDescription(int id, string description);
        public void UpdatePersonDateOfBirth(int id, string dateOfBirthStr);
        public void UpdatePersonDateOfBirth(int id, DateTime dateOfBirth);
        public void UpdatePersonProfileFileId(int id, int? profileFileId);
        public void UpdatePersonSex(int id, Sex sex);
        public void DeletePerson(int id);
        public List<LocationModel> GetLocations();
        public List<LocationModel> GetLocationsFromFile(int fileId);
        public int GetLocationCount();
        public List<LocationModel> SearchLocations(string criteria);
        public LocationModel GetLocationById(int id);
        public bool HasLocationId(int id);
        public void InsertLocation(string name, string description = null, string geoLocation = null);
        public void InsertLocation(string name, string description = null, GeoLocation geoLocation = null);
        public void UpdateLocationName(int id, string name);
        public void UpdateLocationDescription(int id, string description);
        public void UpdateLocationPosition(int id, string geoLocation);
        public void UpdateLocationPosition(int id, GeoLocation geoLocation);
        public void DeleteLocation(int id);
        public List<TagModel> GetTags();
        public List<TagModel> GetTagsFromFile(int fileId);
        public int GetTagCount();
        public List<TagModel> SearchTags(string criteria);
        public TagModel GetTagById(int id);
        public bool HasTagId(int id);
        public void InsertTag(string name);
        public void UpdateTagName(int id, string name);
        public void DeleteTag(int id);
        public string InternalPathToPath(string internalPath);
        public void ValidateFileDescription(string description);
        public void ValidatePersonFirstname(string firstname);
        public void ValidatePersonLastname(string lastname);
        public void ValidatePersonDescription(string description);
        public DateTime ParseDateOfBirth(string dateOfBirthStr);
        public void ValidatePersonDateOfBirth(string dateOfBirthStr);
        public void ValidatePersonProfileFileId(int? profileFileId);
        public void ValidateTagName(string name);
        public void ValidateLocationName(string name);
        public void ValidateLocationDescription(string description);
        public void ValidateLocationGeoLocation(string geoLocationStr, out GeoLocation geoLocation);
    }
}
